# Cursor Rules for Tasks App Database

## Core Rules
- **PostgreSQL**: Use PostgreSQL-specific syntax and functions
- **KISS**: Keep It Simple, Stupid
- **Consistent Naming**: Follow snake_case conventions strictly
- **Modern Standards**: Use descriptive, self-documenting names

## Naming Conventions

### Tables
- **Format**: `snake_case` (e.g., `users`, `user_roles`, `role_permissions`)
- **Primary Key**: `{table_name}_id` (e.g., `users_id`, `persons_id`)
- **Foreign Key**: `{referenced_table}_id` (e.g., `users_id`, `roles_id`)

### Columns
- **Format**: `snake_case` (e.g., `username`, `email`, `created_at`)
- **Primary Key**: `{table_name}_id` (e.g., `users_id`)
- **Foreign Key**: `{referenced_table}_id` (e.g., `users_id`)
- **Audit Fields**: `created_at`, `updated_at`, `is_active`

### Constraints
- **Primary Key**: `pk_{table}_{column}` (e.g., `pk_users_id`)
- **Foreign Key**: `fk_{table}_{referenced_table}` (e.g., `fk_persons_users`)
- **Unique**: `uq_{table}_{column}` (e.g., `uq_users_username`)
- **Check**: `ck_{table}_{column}` (e.g., `ck_users_status`)

### Indexes
- **Format**: `idx_{table}_{columns}` (e.g., `idx_users_email`)
- **Composite**: `idx_{table}_{col1}_{col2}` (e.g., `idx_user_roles_user_role`)

## Table Structure

### Mandatory Audit Columns
```sql
is_active BOOLEAN DEFAULT TRUE,
created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
```

### Primary Key Convention
- **Type**: Always use `UUID` with `GEN_RANDOM_UUID()`
- **Format**: `{table_name}_id`

## PostgreSQL Specific

### Data Types
- **UUID**: `UUID` with `GEN_RANDOM_UUID()`
- **Timestamps**: `TIMESTAMP DEFAULT CURRENT_TIMESTAMP`
- **Text**: `TEXT` for long text, `VARCHAR(n)` for limited
- **Boolean**: `BOOLEAN DEFAULT TRUE/FALSE`
- **Numeric**: `DECIMAL(p,s)` for money, `INTEGER` for whole numbers

### Functions
- **UUID Generation**: `GEN_RANDOM_UUID()`
- **Current Timestamp**: `CURRENT_TIMESTAMP`
- **String Functions**: `LENGTH()`, `TRIM()`, `UPPER()`, `LOWER()`
- **Date Functions**: `NOW()`, `CURRENT_DATE`, `EXTRACT()`

## File Organization

### Directory Structure
```
database/
├── schema/
│   ├── tables/          # Table creation scripts
│   ├── constraints/     # Constraint scripts
│   ├── indexes/         # Index creation scripts
│   └── views/           # View creation scripts (future)
├── data/
│   └── seed/           # Initial and test data
├── logic/
│   ├── functions/       # Custom functions (future)
│   ├── procedures/      # Stored procedures (future)
│   ├── triggers/        # Audit and validation triggers (future)
│   └── packages/        # Packages (future)
└── infrastructure/     # Deployment scripts
    ├── patches/        # Versioned patches
    └── scripts/        # Setup and utility scripts
```

### File Naming
- **Tables**: `{table_name}.sql` (e.g., `users.sql`, `user_roles.sql`)
- **Constraints**: `{table_name}_constraints.sql` (e.g., `users_constraints.sql`)
- **Indexes**: `{table_name}_indexes.sql` (e.g., `users_indexes.sql`)
- **Patches**: `{version}_{description}.sql` (e.g., `001_initial_schema.sql`)

## SQL Code Standards

### Format
- **UPPERCASE** for SQL reserved words and functions
- **snake_case** for custom object names (tables, columns, constraints)
- **Indent** with 4 spaces
- **Separate sections** with blank lines

### Version Header Template
**MANDATORY**: All SQL files must start with:

```sql
--
-- VERSION 1.0.0
--
--
-- VERSION     REQUEST NRO    USER            DATE             CHANGES
-- ----------- -------------- --------------- ---------------- ----------------
-- 1.0.0                      JMVELEZ         15/01/2025       Create users table
-- ----------- -------------- --------------- ---------------- ----------------
--
--
-- OBJECT TYPE: [TABLE/CONSTRAINT/INDEX/PATCH]
-- OBJECT NAME: [FULL_OBJECT_NAME]
-- DESCRIPTION: [Brief description of the object]
--
```

### File Structure Template
```sql
--
-- VERSION 1.0.0
--
--
-- VERSION     REQUEST NRO    USER            DATE             CHANGES
-- ----------- -------------- --------------- ---------------- ----------------
-- 1.0.0                      JMVELEZ         15/01/2025       Create users table
-- ----------- -------------- --------------- ---------------- ----------------
--
--
-- OBJECT TYPE: TABLE
-- OBJECT NAME: users
-- DESCRIPTION: Stores system user information
--

DROP TABLE IF EXISTS users;
CREATE TABLE users (
    users_id UUID DEFAULT GEN_RANDOM_UUID(),
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    password VARCHAR(255) NOT NULL,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

## Example Table Structure

```sql
--
-- VERSION 1.0.0
--
--
-- VERSION     REQUEST NRO    USER            DATE             CHANGES
-- ----------- -------------- --------------- ---------------- ----------------
-- 1.0.0                      JMVELEZ         15/01/2025       Create users table
-- ----------- -------------- --------------- ---------------- ----------------
--
--
-- OBJECT TYPE: TABLE
-- OBJECT NAME: users
-- DESCRIPTION: Stores system user information
--

DROP TABLE IF EXISTS users;
CREATE TABLE users (
    users_id UUID DEFAULT GEN_RANDOM_UUID(),
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    password VARCHAR(255) NOT NULL,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

## Migration Guidelines

### When Updating Existing Tables
- Always use `DROP TABLE IF EXISTS` before `CREATE TABLE`
- Maintain backward compatibility when possible
- Update version numbers in affected files
- Document all changes in the version header

### PostgreSQL Best Practices
- Use `CREATE OR REPLACE` for functions and views
- Use `IF NOT EXISTS` for indexes and constraints when appropriate
- Use `CASCADE` options carefully
- Test all constraints and triggers thoroughly

## Current Database Schema

### Core Tables
- `users` - System authentication
- `persons` - Personal information
- `roles` - User roles
- `permissions` - System permissions

### Relationship Tables
- `user_roles` - User-role assignments
- `role_permissions` - Role-permission assignments

### Business Tables
- `employees` - Employment information
- `clients` - Client information

## Prohibited
❌ No inconsistent naming conventions
❌ No missing version headers
❌ No missing audit columns
❌ No hardcoded UUIDs
❌ No missing constraints
❌ No inconsistent indentation
❌ No old GE_* naming conventions

## Required
✅ Version header in all files
✅ Consistent snake_case naming
✅ Audit columns in all tables
✅ Proper constraints
✅ PostgreSQL-specific syntax
✅ Proper file organization
✅ English documentation
✅ KISS principle
✅ Descriptive, self-documenting names