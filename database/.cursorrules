# Cursor Rules for Tasks App Database

## Core Rules
- **PostgreSQL**: Use PostgreSQL-specific syntax and functions
- **KISS**: Keep It Simple, Stupid
- **Consistent Naming**: Follow established conventions strictly

## Naming Conventions

### Modules
- GE => General
- CL => Client  
- HR => Human Resources

### Objects
- **Tables**: `{MODULE}_T` + 4-letter name (e.g., `GE_TUSER`, `CL_TCLIE`)
- **Views**: `{MODULE}_V` + 4-letter name (e.g., `GE_VUSER_WITH_ROLES`)
- **Procedures**: `{MODULE}_P` + verb + 4-letter name (e.g., `GE_PINS_USER`)
- **Functions**: `{MODULE}_F` + verb + 4-letter name (e.g., `GE_FGET_USER_FULL_NAME`)
- **Triggers**: `{MODULE}_T` + 4-letter table + action (e.g., `GE_TUSER_AUDIT_INSERT`)
- **Indexes**: `{MODULE}_I` + 4-letter table + columns (e.g., `GE_IUSER_EMAIL`)

### Columns
- **Format**: `{4-letter_table_prefix}_{column_name}` in lowercase
- **Primary Key**: `{4-letter_table_prefix}_{4-letter_table_prefix}` (e.g., `user_user`)
- **Examples**: `user_username`, `pers_pers`, `empl_empl`

### Constraints
- **Primary Key**: `PKY_{TABLE}_{4-letter_prefix}` (e.g., `PKY_GE_TUSER_USER`)
- **Foreign Key**: `FKY_{TABLE}_{4-letter_prefix}` (e.g., `FKY_GE_TUSRO_ROLE`)
- **NOT NULL**: `NN_{TABLE}_{4-letter_prefix}` (e.g., `NN_GE_TUSRO_ROLE`)
- **UNIQUE**: `UQ_{TABLE}_{4-letter_prefix}` (e.g., `UQ_GE_TUSER_USERNAME`)
- **CHECK**: `CK_{TABLE}_{4-letter_prefix}` (e.g., `CK_GE_TUSER_STATUS`)

## Table Structure

### Mandatory Audit Columns
```sql
CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
VERSION INTEGER DEFAULT 1
```

### Primary Key Convention
- **Type**: Always use `UUID` with `GEN_RANDOM_UUID()`
- **Format**: `{4-letter_table_prefix}_{4-letter_table_prefix}`

## PostgreSQL Specific

### Data Types
- **UUID**: `UUID` with `GEN_RANDOM_UUID()`
- **Timestamps**: `TIMESTAMP DEFAULT CURRENT_TIMESTAMP`
- **Text**: `TEXT` for long text, `VARCHAR(n)` for limited
- **Boolean**: `BOOLEAN DEFAULT TRUE/FALSE`
- **Numeric**: `DECIMAL(p,s)` for money, `INTEGER` for whole numbers

### Functions
- **UUID Generation**: `GEN_RANDOM_UUID()`
- **Current Timestamp**: `CURRENT_TIMESTAMP`
- **String Functions**: `LENGTH()`, `TRIM()`, `UPPER()`, `LOWER()`
- **Date Functions**: `NOW()`, `CURRENT_DATE`, `EXTRACT()`

## File Organization

### Directory Structure
```
database/
├── schema/
│   ├── tables/          # Table creation scripts
│   ├── views/           # View creation scripts
│   ├── indexes/         # Index creation scripts
│   └── constraints/     # Constraint scripts
├── logic/
│   ├── functions/       # Custom functions
│   ├── procedures/      # Stored procedures
│   ├── triggers/        # Audit and validation triggers
│   └── packages/        # Packages (if applicable)
├── data/
│   └── seed/           # Initial and test data
└── infrastructure/     # Deployment scripts
```

### File Naming
- **Tables**: `{MODULE}_T{4-letter-name}.sql`
- **Views**: `{MODULE}_V{4-letter-name}.sql`
- **Procedures**: `{MODULE}_P{4-letter-name}.sql`
- **Functions**: `{MODULE}_F{4-letter-name}.sql`
- **Triggers**: `{MODULE}_T{4-letter-table}_{ACTION}.sql`

## SQL Code Standards

### Format
- **UPPERCASE** for SQL reserved words and functions
- **lowercase** for custom object names (tables, columns, constraints)
- **Indent** with 4 spaces
- **Separate sections** with blank lines

### Version Header Template
**MANDATORY**: All SQL files must start with:

```sql
--
-- VERSION 1.0.0
--
--
-- VERSION     REQUEST NRO    USER            DATE             CHANGES
-- ----------- -------------- --------------- ---------------- ----------------
-- 1.0.0                      JMVELEZ         15/01/2025       Create users table
-- ----------- -------------- --------------- ---------------- ----------------
---
```

### File Structure Template
```sql
--
-- VERSION 1.0.0
--
--
-- VERSION     REQUEST NRO    USER            DATE             CHANGES
-- ----------- -------------- --------------- ---------------- ----------------
-- 1.0.0                      JMVELEZ         15/01/2025       Create users table
-- ----------- -------------- --------------- ---------------- ----------------
---
--
-- OBJECT TYPE: [TABLE/VIEW/PROCEDURE/FUNCTION/TRIGGER]
-- OBJECT NAME: [FULL_OBJECT_NAME]
-- DESCRIPTION: [Brief description of the object]
--
-- [SQL CODE HERE]
```

## Example Table Structure

```sql
--
-- VERSION 1.0.0
--
--
-- VERSION     REQUEST NRO    USER            DATE             CHANGES
-- ----------- -------------- --------------- ---------------- ----------------
-- 1.0.0                      JMVELEZ         15/01/2025       Create users table
-- ----------- -------------- --------------- ---------------- ----------------
---
--
-- OBJECT TYPE: TABLE
-- OBJECT NAME: GE_TUSER
-- DESCRIPTION: Stores system user information
--

DROP TABLE IF EXISTS GE_TUSER;
CREATE TABLE GE_TUSER (
    user_user UUID DEFAULT GEN_RANDOM_UUID(),
    user_username VARCHAR(50) NOT NULL,
    user_email VARCHAR(100) NOT NULL,
    user_pwd VARCHAR(255) NOT NULL,
    user_phone VARCHAR(20),
    user_is_active BOOLEAN DEFAULT TRUE,
    user_created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    user_updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT PKY_GE_TUSER_USER PRIMARY KEY (user_user),
    CONSTRAINT UQ_GE_TUSER_USERNAME UNIQUE (user_username),
    CONSTRAINT UQ_GE_TUSER_EMAIL UNIQUE (user_email)
);

-- Indexes
CREATE INDEX GE_IUSER_USERNAME ON GE_TUSER(user_username);
CREATE INDEX GE_IUSER_EMAIL ON GE_TUSER(user_email);
CREATE INDEX GE_IUSER_ACTIVE ON GE_TUSER(user_is_active);
```

## Migration Guidelines

### When Updating Existing Tables
- Always use `DROP TABLE IF EXISTS` before `CREATE TABLE`
- Maintain backward compatibility when possible
- Update version numbers in affected files
- Document all changes in the version header

### PostgreSQL Best Practices
- Use `CREATE OR REPLACE` for functions and views
- Use `IF NOT EXISTS` for indexes and constraints when appropriate
- Use `CASCADE` options carefully
- Test all constraints and triggers thoroughly

## Prohibited
❌ No inconsistent naming conventions
❌ No missing version headers
❌ No missing audit columns
❌ No hardcoded UUIDs
❌ No missing constraints
❌ No inconsistent indentation

## Required
✅ Version header in all files
✅ Consistent naming conventions
✅ Audit columns in all tables
✅ Proper constraints
✅ PostgreSQL-specific syntax
✅ Proper file organization
✅ English documentation
✅ KISS principle
